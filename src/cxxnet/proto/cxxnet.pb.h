// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cxxnet/proto/cxxnet.proto

#ifndef PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED
#define PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace CXXNET {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

class Config;
class PressureTestEntry;
class PressureTest;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 report_interval = 4 [default = 1];
  inline bool has_report_interval() const;
  inline void clear_report_interval();
  static const int kReportIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 report_interval() const;
  inline void set_report_interval(::google::protobuf::int32 value);

  // optional .PS.CXXNET.PressureTest pressure_test = 10;
  inline bool has_pressure_test() const;
  inline void clear_pressure_test();
  static const int kPressureTestFieldNumber = 10;
  inline const ::PS::CXXNET::PressureTest& pressure_test() const;
  inline ::PS::CXXNET::PressureTest* mutable_pressure_test();
  inline ::PS::CXXNET::PressureTest* release_pressure_test();
  inline void set_allocated_pressure_test(::PS::CXXNET::PressureTest* pressure_test);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.Config)
 private:
  inline void set_has_report_interval();
  inline void clear_has_report_interval();
  inline void set_has_pressure_test();
  inline void clear_has_pressure_test();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::CXXNET::PressureTest* pressure_test_;
  ::google::protobuf::int32 report_interval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class PressureTestEntry : public ::google::protobuf::Message {
 public:
  PressureTestEntry();
  virtual ~PressureTestEntry();

  PressureTestEntry(const PressureTestEntry& from);

  inline PressureTestEntry& operator=(const PressureTestEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureTestEntry& default_instance();

  void Swap(PressureTestEntry* other);

  // implements Message ----------------------------------------------

  PressureTestEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressureTestEntry& from);
  void MergeFrom(const PressureTestEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required int32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.PressureTestEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_width();
  inline void clear_has_width();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static PressureTestEntry* default_instance_;
};
// -------------------------------------------------------------------

class PressureTest : public ::google::protobuf::Message {
 public:
  PressureTest();
  virtual ~PressureTest();

  PressureTest(const PressureTest& from);

  inline PressureTest& operator=(const PressureTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureTest& default_instance();

  void Swap(PressureTest* other);

  // implements Message ----------------------------------------------

  PressureTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressureTest& from);
  void MergeFrom(const PressureTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ndevice = 1;
  inline bool has_ndevice() const;
  inline void clear_ndevice();
  static const int kNdeviceFieldNumber = 1;
  inline ::google::protobuf::int32 ndevice() const;
  inline void set_ndevice(::google::protobuf::int32 value);

  // repeated .PS.CXXNET.PressureTestEntry param = 2;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline const ::PS::CXXNET::PressureTestEntry& param(int index) const;
  inline ::PS::CXXNET::PressureTestEntry* mutable_param(int index);
  inline ::PS::CXXNET::PressureTestEntry* add_param();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::CXXNET::PressureTestEntry >&
      param() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::CXXNET::PressureTestEntry >*
      mutable_param();

  // optional int32 repeat = 3 [default = 10];
  inline bool has_repeat() const;
  inline void clear_repeat();
  static const int kRepeatFieldNumber = 3;
  inline ::google::protobuf::int32 repeat() const;
  inline void set_repeat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.PressureTest)
 private:
  inline void set_has_ndevice();
  inline void clear_has_ndevice();
  inline void set_has_repeat();
  inline void clear_has_repeat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PS::CXXNET::PressureTestEntry > param_;
  ::google::protobuf::int32 ndevice_;
  ::google::protobuf::int32 repeat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static PressureTest* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional int32 report_interval = 4 [default = 1];
inline bool Config::has_report_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_report_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_report_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_report_interval() {
  report_interval_ = 1;
  clear_has_report_interval();
}
inline ::google::protobuf::int32 Config::report_interval() const {
  return report_interval_;
}
inline void Config::set_report_interval(::google::protobuf::int32 value) {
  set_has_report_interval();
  report_interval_ = value;
}

// optional .PS.CXXNET.PressureTest pressure_test = 10;
inline bool Config::has_pressure_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_pressure_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_pressure_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_pressure_test() {
  if (pressure_test_ != NULL) pressure_test_->::PS::CXXNET::PressureTest::Clear();
  clear_has_pressure_test();
}
inline const ::PS::CXXNET::PressureTest& Config::pressure_test() const {
  return pressure_test_ != NULL ? *pressure_test_ : *default_instance_->pressure_test_;
}
inline ::PS::CXXNET::PressureTest* Config::mutable_pressure_test() {
  set_has_pressure_test();
  if (pressure_test_ == NULL) pressure_test_ = new ::PS::CXXNET::PressureTest;
  return pressure_test_;
}
inline ::PS::CXXNET::PressureTest* Config::release_pressure_test() {
  clear_has_pressure_test();
  ::PS::CXXNET::PressureTest* temp = pressure_test_;
  pressure_test_ = NULL;
  return temp;
}
inline void Config::set_allocated_pressure_test(::PS::CXXNET::PressureTest* pressure_test) {
  delete pressure_test_;
  pressure_test_ = pressure_test;
  if (pressure_test) {
    set_has_pressure_test();
  } else {
    clear_has_pressure_test();
  }
}

// -------------------------------------------------------------------

// PressureTestEntry

// required int32 key = 1;
inline bool PressureTestEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PressureTestEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PressureTestEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PressureTestEntry::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 PressureTestEntry::key() const {
  return key_;
}
inline void PressureTestEntry::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 height = 2;
inline bool PressureTestEntry::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PressureTestEntry::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PressureTestEntry::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PressureTestEntry::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 PressureTestEntry::height() const {
  return height_;
}
inline void PressureTestEntry::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// required int32 width = 3;
inline bool PressureTestEntry::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PressureTestEntry::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PressureTestEntry::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PressureTestEntry::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 PressureTestEntry::width() const {
  return width_;
}
inline void PressureTestEntry::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// -------------------------------------------------------------------

// PressureTest

// required int32 ndevice = 1;
inline bool PressureTest::has_ndevice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PressureTest::set_has_ndevice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PressureTest::clear_has_ndevice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PressureTest::clear_ndevice() {
  ndevice_ = 0;
  clear_has_ndevice();
}
inline ::google::protobuf::int32 PressureTest::ndevice() const {
  return ndevice_;
}
inline void PressureTest::set_ndevice(::google::protobuf::int32 value) {
  set_has_ndevice();
  ndevice_ = value;
}

// repeated .PS.CXXNET.PressureTestEntry param = 2;
inline int PressureTest::param_size() const {
  return param_.size();
}
inline void PressureTest::clear_param() {
  param_.Clear();
}
inline const ::PS::CXXNET::PressureTestEntry& PressureTest::param(int index) const {
  return param_.Get(index);
}
inline ::PS::CXXNET::PressureTestEntry* PressureTest::mutable_param(int index) {
  return param_.Mutable(index);
}
inline ::PS::CXXNET::PressureTestEntry* PressureTest::add_param() {
  return param_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::CXXNET::PressureTestEntry >&
PressureTest::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::CXXNET::PressureTestEntry >*
PressureTest::mutable_param() {
  return &param_;
}

// optional int32 repeat = 3 [default = 10];
inline bool PressureTest::has_repeat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PressureTest::set_has_repeat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PressureTest::clear_has_repeat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PressureTest::clear_repeat() {
  repeat_ = 10;
  clear_has_repeat();
}
inline ::google::protobuf::int32 PressureTest::repeat() const {
  return repeat_;
}
inline void PressureTest::set_repeat(::google::protobuf::int32 value) {
  set_has_repeat();
  repeat_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CXXNET
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED
