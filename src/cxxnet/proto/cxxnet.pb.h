// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cxxnet/proto/cxxnet.proto

#ifndef PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED
#define PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace CXXNET {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

class Config;
class PressureTest;

// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 report_interval = 4 [default = 1];
  inline bool has_report_interval() const;
  inline void clear_report_interval();
  static const int kReportIntervalFieldNumber = 4;
  inline ::google::protobuf::int32 report_interval() const;
  inline void set_report_interval(::google::protobuf::int32 value);

  // optional .PS.CXXNET.PressureTest pressure_test = 10;
  inline bool has_pressure_test() const;
  inline void clear_pressure_test();
  static const int kPressureTestFieldNumber = 10;
  inline const ::PS::CXXNET::PressureTest& pressure_test() const;
  inline ::PS::CXXNET::PressureTest* mutable_pressure_test();
  inline ::PS::CXXNET::PressureTest* release_pressure_test();
  inline void set_allocated_pressure_test(::PS::CXXNET::PressureTest* pressure_test);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.Config)
 private:
  inline void set_has_report_interval();
  inline void clear_has_report_interval();
  inline void set_has_pressure_test();
  inline void clear_has_pressure_test();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::CXXNET::PressureTest* pressure_test_;
  ::google::protobuf::int32 report_interval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class PressureTest : public ::google::protobuf::Message {
 public:
  PressureTest();
  virtual ~PressureTest();

  PressureTest(const PressureTest& from);

  inline PressureTest& operator=(const PressureTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PressureTest& default_instance();

  void Swap(PressureTest* other);

  // implements Message ----------------------------------------------

  PressureTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PressureTest& from);
  void MergeFrom(const PressureTest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key(int index) const;
  inline void set_key(int index, ::google::protobuf::int32 value);
  inline void add_key(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_key();

  // repeated int32 size = 2;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size(int index) const;
  inline void set_size(int index, ::google::protobuf::int32 value);
  inline void add_size(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_size();

  // optional int32 max_delay = 3 [default = 0];
  inline bool has_max_delay() const;
  inline void clear_max_delay();
  static const int kMaxDelayFieldNumber = 3;
  inline ::google::protobuf::int32 max_delay() const;
  inline void set_max_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.PressureTest)
 private:
  inline void set_has_max_delay();
  inline void clear_has_max_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > size_;
  ::google::protobuf::int32 max_delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fproto_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fproto_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static PressureTest* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional int32 report_interval = 4 [default = 1];
inline bool Config::has_report_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_report_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_report_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_report_interval() {
  report_interval_ = 1;
  clear_has_report_interval();
}
inline ::google::protobuf::int32 Config::report_interval() const {
  return report_interval_;
}
inline void Config::set_report_interval(::google::protobuf::int32 value) {
  set_has_report_interval();
  report_interval_ = value;
}

// optional .PS.CXXNET.PressureTest pressure_test = 10;
inline bool Config::has_pressure_test() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_pressure_test() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_pressure_test() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_pressure_test() {
  if (pressure_test_ != NULL) pressure_test_->::PS::CXXNET::PressureTest::Clear();
  clear_has_pressure_test();
}
inline const ::PS::CXXNET::PressureTest& Config::pressure_test() const {
  return pressure_test_ != NULL ? *pressure_test_ : *default_instance_->pressure_test_;
}
inline ::PS::CXXNET::PressureTest* Config::mutable_pressure_test() {
  set_has_pressure_test();
  if (pressure_test_ == NULL) pressure_test_ = new ::PS::CXXNET::PressureTest;
  return pressure_test_;
}
inline ::PS::CXXNET::PressureTest* Config::release_pressure_test() {
  clear_has_pressure_test();
  ::PS::CXXNET::PressureTest* temp = pressure_test_;
  pressure_test_ = NULL;
  return temp;
}
inline void Config::set_allocated_pressure_test(::PS::CXXNET::PressureTest* pressure_test) {
  delete pressure_test_;
  pressure_test_ = pressure_test;
  if (pressure_test) {
    set_has_pressure_test();
  } else {
    clear_has_pressure_test();
  }
}

// -------------------------------------------------------------------

// PressureTest

// repeated int32 key = 1;
inline int PressureTest::key_size() const {
  return key_.size();
}
inline void PressureTest::clear_key() {
  key_.Clear();
}
inline ::google::protobuf::int32 PressureTest::key(int index) const {
  return key_.Get(index);
}
inline void PressureTest::set_key(int index, ::google::protobuf::int32 value) {
  key_.Set(index, value);
}
inline void PressureTest::add_key(::google::protobuf::int32 value) {
  key_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PressureTest::key() const {
  return key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PressureTest::mutable_key() {
  return &key_;
}

// repeated int32 size = 2;
inline int PressureTest::size_size() const {
  return size_.size();
}
inline void PressureTest::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::int32 PressureTest::size(int index) const {
  return size_.Get(index);
}
inline void PressureTest::set_size(int index, ::google::protobuf::int32 value) {
  size_.Set(index, value);
}
inline void PressureTest::add_size(::google::protobuf::int32 value) {
  size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PressureTest::size() const {
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PressureTest::mutable_size() {
  return &size_;
}

// optional int32 max_delay = 3 [default = 0];
inline bool PressureTest::has_max_delay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PressureTest::set_has_max_delay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PressureTest::clear_has_max_delay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PressureTest::clear_max_delay() {
  max_delay_ = 0;
  clear_has_max_delay();
}
inline ::google::protobuf::int32 PressureTest::max_delay() const {
  return max_delay_;
}
inline void PressureTest::set_max_delay(::google::protobuf::int32 value) {
  set_has_max_delay();
  max_delay_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CXXNET
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cxxnet_2fproto_2fcxxnet_2eproto__INCLUDED
