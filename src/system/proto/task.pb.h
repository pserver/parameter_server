// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/proto/task.proto

#ifndef PROTOBUF_system_2fproto_2ftask_2eproto__INCLUDED
#define PROTOBUF_system_2fproto_2ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util/proto/range.pb.h"
#include "data/proto/data.pb.h"
#include "system/proto/node.pb.h"
#include "parameter/proto/param.pb.h"
#include "filter/proto/filter.pb.h"
#include "learner/proto/sgd.pb.h"
#include "learner/proto/bcd.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_system_2fproto_2ftask_2eproto();
void protobuf_AssignDesc_system_2fproto_2ftask_2eproto();
void protobuf_ShutdownFile_system_2fproto_2ftask_2eproto();

class Task;
class Control;

enum Task_Type {
  Task_Type_CALL_CUSTOMER = 1,
  Task_Type_CONTROL = 2
};
bool Task_Type_IsValid(int value);
const Task_Type Task_Type_Type_MIN = Task_Type_CALL_CUSTOMER;
const Task_Type Task_Type_Type_MAX = Task_Type_CONTROL;
const int Task_Type_Type_ARRAYSIZE = Task_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_Type_descriptor();
inline const ::std::string& Task_Type_Name(Task_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_Type_descriptor(), value);
}
inline bool Task_Type_Parse(
    const ::std::string& name, Task_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_Type>(
    Task_Type_descriptor(), name, value);
}
enum Control_Command {
  Control_Command_CONNECT = 1,
  Control_Command_STOP = 6,
  Control_Command_HEARTBEAT = 9,
  Control_Command_ADD = 2,
  Control_Command_UPDATE = 3,
  Control_Command_REPLACE = 4,
  Control_Command_REMOVE = 5,
  Control_Command_TERMINATE = 7,
  Control_Command_CREATE_APP = 8
};
bool Control_Command_IsValid(int value);
const Control_Command Control_Command_Command_MIN = Control_Command_CONNECT;
const Control_Command Control_Command_Command_MAX = Control_Command_HEARTBEAT;
const int Control_Command_Command_ARRAYSIZE = Control_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Control_Command_descriptor();
inline const ::std::string& Control_Command_Name(Control_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Control_Command_descriptor(), value);
}
inline bool Control_Command_Parse(
    const ::std::string& name, Control_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Control_Command>(
    Control_Command_descriptor(), name, value);
}
enum DataType {
  OTHER = 0,
  INT8 = 1,
  INT16 = 2,
  INT32 = 3,
  INT64 = 4,
  UINT8 = 5,
  UINT16 = 6,
  UINT32 = 7,
  UINT64 = 8,
  FLOAT = 9,
  DOUBLE = 10,
  CHAR = 11
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = OTHER;
const DataType DataType_MAX = CHAR;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Task_Type Type;
  static const Type CALL_CUSTOMER = Task_Type_CALL_CUSTOMER;
  static const Type CONTROL = Task_Type_CONTROL;
  static inline bool Type_IsValid(int value) {
    return Task_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Task_Type_Type_MIN;
  static const Type Type_MAX =
    Task_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Task_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Task_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Task_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Task_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::Task_Type type() const;
  inline void set_type(::PS::Task_Type value);

  // optional bool request = 2 [default = false];
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline bool request() const;
  inline void set_request(bool value);

  // optional string customer = 4;
  inline bool has_customer() const;
  inline void clear_customer();
  static const int kCustomerFieldNumber = 4;
  inline const ::std::string& customer() const;
  inline void set_customer(const ::std::string& value);
  inline void set_customer(const char* value);
  inline void set_customer(const char* value, size_t size);
  inline ::std::string* mutable_customer();
  inline ::std::string* release_customer();
  inline void set_allocated_customer(::std::string* customer);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated int32 wait_time = 6;
  inline int wait_time_size() const;
  inline void clear_wait_time();
  static const int kWaitTimeFieldNumber = 6;
  inline ::google::protobuf::int32 wait_time(int index) const;
  inline void set_wait_time(int index, ::google::protobuf::int32 value);
  inline void add_wait_time(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      wait_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_wait_time();

  // optional .PS.PbRange key_range = 7;
  inline bool has_key_range() const;
  inline void clear_key_range();
  static const int kKeyRangeFieldNumber = 7;
  inline const ::PS::PbRange& key_range() const;
  inline ::PS::PbRange* mutable_key_range();
  inline ::PS::PbRange* release_key_range();
  inline void set_allocated_key_range(::PS::PbRange* key_range);

  // optional int32 key_channel = 8;
  inline bool has_key_channel() const;
  inline void clear_key_channel();
  static const int kKeyChannelFieldNumber = 8;
  inline ::google::protobuf::int32 key_channel() const;
  inline void set_key_channel(::google::protobuf::int32 value);

  // optional bool has_key = 9 [default = false];
  inline bool has_has_key() const;
  inline void clear_has_key();
  static const int kHasKeyFieldNumber = 9;
  inline bool has_key() const;
  inline void set_has_key(bool value);

  // optional string key_channel_str = 10;
  inline bool has_key_channel_str() const;
  inline void clear_key_channel_str();
  static const int kKeyChannelStrFieldNumber = 10;
  inline const ::std::string& key_channel_str() const;
  inline void set_key_channel_str(const ::std::string& value);
  inline void set_key_channel_str(const char* value);
  inline void set_key_channel_str(const char* value, size_t size);
  inline ::std::string* mutable_key_channel_str();
  inline ::std::string* release_key_channel_str();
  inline void set_allocated_key_channel_str(::std::string* key_channel_str);

  // optional .PS.DataType key_type = 13;
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 13;
  inline ::PS::DataType key_type() const;
  inline void set_key_type(::PS::DataType value);

  // repeated .PS.DataType value_type = 14;
  inline int value_type_size() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 14;
  inline ::PS::DataType value_type(int index) const;
  inline void set_value_type(int index, ::PS::DataType value);
  inline void add_value_type(::PS::DataType value);
  inline const ::google::protobuf::RepeatedField<int>& value_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_value_type();

  // repeated .PS.FilterConfig filter = 12;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 12;
  inline const ::PS::FilterConfig& filter(int index) const;
  inline ::PS::FilterConfig* mutable_filter(int index);
  inline ::PS::FilterConfig* add_filter();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >&
      filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >*
      mutable_filter();

  // optional bytes msg = 17;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 17;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .PS.Control control = 18;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 18;
  inline const ::PS::Control& control() const;
  inline ::PS::Control* mutable_control();
  inline ::PS::Control* release_control();
  inline void set_allocated_control(::PS::Control* control);

  // optional .PS.CallSharedPara shared_para = 20;
  inline bool has_shared_para() const;
  inline void clear_shared_para();
  static const int kSharedParaFieldNumber = 20;
  inline const ::PS::CallSharedPara& shared_para() const;
  inline ::PS::CallSharedPara* mutable_shared_para();
  inline ::PS::CallSharedPara* release_shared_para();
  inline void set_allocated_shared_para(::PS::CallSharedPara* shared_para);

  // optional .PS.SGDCall sgd = 21;
  inline bool has_sgd() const;
  inline void clear_sgd();
  static const int kSgdFieldNumber = 21;
  inline const ::PS::SGDCall& sgd() const;
  inline ::PS::SGDCall* mutable_sgd();
  inline ::PS::SGDCall* release_sgd();
  inline void set_allocated_sgd(::PS::SGDCall* sgd);

  // optional .PS.BCDCall bcd = 22;
  inline bool has_bcd() const;
  inline void clear_bcd();
  static const int kBcdFieldNumber = 22;
  inline const ::PS::BCDCall& bcd() const;
  inline ::PS::BCDCall* mutable_bcd();
  inline ::PS::BCDCall* release_bcd();
  inline void set_allocated_bcd(::PS::BCDCall* bcd);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Task)
  // @@protoc_insertion_point(class_scope:PS.Task)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_customer();
  inline void clear_has_customer();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_key_range();
  inline void clear_has_key_range();
  inline void set_has_key_channel();
  inline void clear_has_key_channel();
  inline void set_has_has_key();
  inline void clear_has_has_key();
  inline void set_has_key_channel_str();
  inline void clear_has_key_channel_str();
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_control();
  inline void clear_has_control();
  inline void set_has_shared_para();
  inline void clear_has_shared_para();
  inline void set_has_sgd();
  inline void clear_has_sgd();
  inline void set_has_bcd();
  inline void clear_has_bcd();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 time_;
  ::std::string* customer_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > wait_time_;
  bool request_;
  bool has_key_;
  ::google::protobuf::int32 key_channel_;
  ::PS::PbRange* key_range_;
  ::std::string* key_channel_str_;
  ::google::protobuf::RepeatedField<int> value_type_;
  ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig > filter_;
  ::std::string* msg_;
  ::PS::Control* control_;
  ::PS::CallSharedPara* shared_para_;
  ::PS::SGDCall* sgd_;
  ::PS::BCDCall* bcd_;
  int key_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  friend void protobuf_AssignDesc_system_2fproto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_system_2fproto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class Control : public ::google::protobuf::Message {
 public:
  Control();
  virtual ~Control();

  Control(const Control& from);

  inline Control& operator=(const Control& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Control& default_instance();

  void Swap(Control* other);

  // implements Message ----------------------------------------------

  Control* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Control& from);
  void MergeFrom(const Control& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Control_Command Command;
  static const Command CONNECT = Control_Command_CONNECT;
  static const Command STOP = Control_Command_STOP;
  static const Command HEARTBEAT = Control_Command_HEARTBEAT;
  static const Command ADD = Control_Command_ADD;
  static const Command UPDATE = Control_Command_UPDATE;
  static const Command REPLACE = Control_Command_REPLACE;
  static const Command REMOVE = Control_Command_REMOVE;
  static const Command TERMINATE = Control_Command_TERMINATE;
  static const Command CREATE_APP = Control_Command_CREATE_APP;
  static inline bool Command_IsValid(int value) {
    return Control_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Control_Command_Command_MIN;
  static const Command Command_MAX =
    Control_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Control_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Control_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Control_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Control_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.Control.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::Control_Command cmd() const;
  inline void set_cmd(::PS::Control_Command value);

  // repeated .PS.Node node = 2;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline const ::PS::Node& node(int index) const;
  inline ::PS::Node* mutable_node(int index);
  inline ::PS::Node* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::Node >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::Node >*
      mutable_node();

  // optional string app_conf = 3;
  inline bool has_app_conf() const;
  inline void clear_app_conf();
  static const int kAppConfFieldNumber = 3;
  inline const ::std::string& app_conf() const;
  inline void set_app_conf(const ::std::string& value);
  inline void set_app_conf(const char* value);
  inline void set_app_conf(const char* value, size_t size);
  inline ::std::string* mutable_app_conf();
  inline ::std::string* release_app_conf();
  inline void set_allocated_app_conf(::std::string* app_conf);

  // @@protoc_insertion_point(class_scope:PS.Control)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_app_conf();
  inline void clear_has_app_conf();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PS::Node > node_;
  ::std::string* app_conf_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  friend void protobuf_AssignDesc_system_2fproto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_system_2fproto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Control* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// optional .PS.Task.Type type = 1 [default = CALL_CUSTOMER];
inline bool Task::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::Task_Type Task::type() const {
  return static_cast< ::PS::Task_Type >(type_);
}
inline void Task::set_type(::PS::Task_Type value) {
  assert(::PS::Task_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool request = 2 [default = false];
inline bool Task::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_request() {
  request_ = false;
  clear_has_request();
}
inline bool Task::request() const {
  return request_;
}
inline void Task::set_request(bool value) {
  set_has_request();
  request_ = value;
}

// optional string customer = 4;
inline bool Task::has_customer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_customer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_customer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_customer() {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    customer_->clear();
  }
  clear_has_customer();
}
inline const ::std::string& Task::customer() const {
  return *customer_;
}
inline void Task::set_customer(const ::std::string& value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void Task::set_customer(const char* value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void Task::set_customer(const char* value, size_t size) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_customer() {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  return customer_;
}
inline ::std::string* Task::release_customer() {
  clear_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customer_;
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_customer(::std::string* customer) {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (customer) {
    set_has_customer();
    customer_ = customer;
  } else {
    clear_has_customer();
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 5;
inline bool Task::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Task::time() const {
  return time_;
}
inline void Task::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated int32 wait_time = 6;
inline int Task::wait_time_size() const {
  return wait_time_.size();
}
inline void Task::clear_wait_time() {
  wait_time_.Clear();
}
inline ::google::protobuf::int32 Task::wait_time(int index) const {
  return wait_time_.Get(index);
}
inline void Task::set_wait_time(int index, ::google::protobuf::int32 value) {
  wait_time_.Set(index, value);
}
inline void Task::add_wait_time(::google::protobuf::int32 value) {
  wait_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Task::wait_time() const {
  return wait_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Task::mutable_wait_time() {
  return &wait_time_;
}

// optional .PS.PbRange key_range = 7;
inline bool Task::has_key_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_key_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_key_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_key_range() {
  if (key_range_ != NULL) key_range_->::PS::PbRange::Clear();
  clear_has_key_range();
}
inline const ::PS::PbRange& Task::key_range() const {
  return key_range_ != NULL ? *key_range_ : *default_instance_->key_range_;
}
inline ::PS::PbRange* Task::mutable_key_range() {
  set_has_key_range();
  if (key_range_ == NULL) key_range_ = new ::PS::PbRange;
  return key_range_;
}
inline ::PS::PbRange* Task::release_key_range() {
  clear_has_key_range();
  ::PS::PbRange* temp = key_range_;
  key_range_ = NULL;
  return temp;
}
inline void Task::set_allocated_key_range(::PS::PbRange* key_range) {
  delete key_range_;
  key_range_ = key_range;
  if (key_range) {
    set_has_key_range();
  } else {
    clear_has_key_range();
  }
}

// optional int32 key_channel = 8;
inline bool Task::has_key_channel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_key_channel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_key_channel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_key_channel() {
  key_channel_ = 0;
  clear_has_key_channel();
}
inline ::google::protobuf::int32 Task::key_channel() const {
  return key_channel_;
}
inline void Task::set_key_channel(::google::protobuf::int32 value) {
  set_has_key_channel();
  key_channel_ = value;
}

// optional bool has_key = 9 [default = false];
inline bool Task::has_has_key() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_has_key() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_has_key() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_has_key() {
  has_key_ = false;
  clear_has_has_key();
}
inline bool Task::has_key() const {
  return has_key_;
}
inline void Task::set_has_key(bool value) {
  set_has_has_key();
  has_key_ = value;
}

// optional string key_channel_str = 10;
inline bool Task::has_key_channel_str() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_key_channel_str() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_key_channel_str() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_key_channel_str() {
  if (key_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    key_channel_str_->clear();
  }
  clear_has_key_channel_str();
}
inline const ::std::string& Task::key_channel_str() const {
  return *key_channel_str_;
}
inline void Task::set_key_channel_str(const ::std::string& value) {
  set_has_key_channel_str();
  if (key_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    key_channel_str_ = new ::std::string;
  }
  key_channel_str_->assign(value);
}
inline void Task::set_key_channel_str(const char* value) {
  set_has_key_channel_str();
  if (key_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    key_channel_str_ = new ::std::string;
  }
  key_channel_str_->assign(value);
}
inline void Task::set_key_channel_str(const char* value, size_t size) {
  set_has_key_channel_str();
  if (key_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    key_channel_str_ = new ::std::string;
  }
  key_channel_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_key_channel_str() {
  set_has_key_channel_str();
  if (key_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    key_channel_str_ = new ::std::string;
  }
  return key_channel_str_;
}
inline ::std::string* Task::release_key_channel_str() {
  clear_has_key_channel_str();
  if (key_channel_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_channel_str_;
    key_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_key_channel_str(::std::string* key_channel_str) {
  if (key_channel_str_ != &::google::protobuf::internal::kEmptyString) {
    delete key_channel_str_;
  }
  if (key_channel_str) {
    set_has_key_channel_str();
    key_channel_str_ = key_channel_str;
  } else {
    clear_has_key_channel_str();
    key_channel_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PS.DataType key_type = 13;
inline bool Task::has_key_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_key_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::PS::DataType Task::key_type() const {
  return static_cast< ::PS::DataType >(key_type_);
}
inline void Task::set_key_type(::PS::DataType value) {
  assert(::PS::DataType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
}

// repeated .PS.DataType value_type = 14;
inline int Task::value_type_size() const {
  return value_type_.size();
}
inline void Task::clear_value_type() {
  value_type_.Clear();
}
inline ::PS::DataType Task::value_type(int index) const {
  return static_cast< ::PS::DataType >(value_type_.Get(index));
}
inline void Task::set_value_type(int index, ::PS::DataType value) {
  assert(::PS::DataType_IsValid(value));
  value_type_.Set(index, value);
}
inline void Task::add_value_type(::PS::DataType value) {
  assert(::PS::DataType_IsValid(value));
  value_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Task::value_type() const {
  return value_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Task::mutable_value_type() {
  return &value_type_;
}

// repeated .PS.FilterConfig filter = 12;
inline int Task::filter_size() const {
  return filter_.size();
}
inline void Task::clear_filter() {
  filter_.Clear();
}
inline const ::PS::FilterConfig& Task::filter(int index) const {
  return filter_.Get(index);
}
inline ::PS::FilterConfig* Task::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline ::PS::FilterConfig* Task::add_filter() {
  return filter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >&
Task::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >*
Task::mutable_filter() {
  return &filter_;
}

// optional bytes msg = 17;
inline bool Task::has_msg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Task::set_has_msg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Task::clear_has_msg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Task::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Task::msg() const {
  return *msg_;
}
inline void Task::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Task::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Task::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Task::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PS.Control control = 18;
inline bool Task::has_control() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Task::set_has_control() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Task::clear_has_control() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Task::clear_control() {
  if (control_ != NULL) control_->::PS::Control::Clear();
  clear_has_control();
}
inline const ::PS::Control& Task::control() const {
  return control_ != NULL ? *control_ : *default_instance_->control_;
}
inline ::PS::Control* Task::mutable_control() {
  set_has_control();
  if (control_ == NULL) control_ = new ::PS::Control;
  return control_;
}
inline ::PS::Control* Task::release_control() {
  clear_has_control();
  ::PS::Control* temp = control_;
  control_ = NULL;
  return temp;
}
inline void Task::set_allocated_control(::PS::Control* control) {
  delete control_;
  control_ = control;
  if (control) {
    set_has_control();
  } else {
    clear_has_control();
  }
}

// optional .PS.CallSharedPara shared_para = 20;
inline bool Task::has_shared_para() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Task::set_has_shared_para() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Task::clear_has_shared_para() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Task::clear_shared_para() {
  if (shared_para_ != NULL) shared_para_->::PS::CallSharedPara::Clear();
  clear_has_shared_para();
}
inline const ::PS::CallSharedPara& Task::shared_para() const {
  return shared_para_ != NULL ? *shared_para_ : *default_instance_->shared_para_;
}
inline ::PS::CallSharedPara* Task::mutable_shared_para() {
  set_has_shared_para();
  if (shared_para_ == NULL) shared_para_ = new ::PS::CallSharedPara;
  return shared_para_;
}
inline ::PS::CallSharedPara* Task::release_shared_para() {
  clear_has_shared_para();
  ::PS::CallSharedPara* temp = shared_para_;
  shared_para_ = NULL;
  return temp;
}
inline void Task::set_allocated_shared_para(::PS::CallSharedPara* shared_para) {
  delete shared_para_;
  shared_para_ = shared_para;
  if (shared_para) {
    set_has_shared_para();
  } else {
    clear_has_shared_para();
  }
}

// optional .PS.SGDCall sgd = 21;
inline bool Task::has_sgd() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Task::set_has_sgd() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Task::clear_has_sgd() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Task::clear_sgd() {
  if (sgd_ != NULL) sgd_->::PS::SGDCall::Clear();
  clear_has_sgd();
}
inline const ::PS::SGDCall& Task::sgd() const {
  return sgd_ != NULL ? *sgd_ : *default_instance_->sgd_;
}
inline ::PS::SGDCall* Task::mutable_sgd() {
  set_has_sgd();
  if (sgd_ == NULL) sgd_ = new ::PS::SGDCall;
  return sgd_;
}
inline ::PS::SGDCall* Task::release_sgd() {
  clear_has_sgd();
  ::PS::SGDCall* temp = sgd_;
  sgd_ = NULL;
  return temp;
}
inline void Task::set_allocated_sgd(::PS::SGDCall* sgd) {
  delete sgd_;
  sgd_ = sgd;
  if (sgd) {
    set_has_sgd();
  } else {
    clear_has_sgd();
  }
}

// optional .PS.BCDCall bcd = 22;
inline bool Task::has_bcd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Task::set_has_bcd() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Task::clear_has_bcd() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Task::clear_bcd() {
  if (bcd_ != NULL) bcd_->::PS::BCDCall::Clear();
  clear_has_bcd();
}
inline const ::PS::BCDCall& Task::bcd() const {
  return bcd_ != NULL ? *bcd_ : *default_instance_->bcd_;
}
inline ::PS::BCDCall* Task::mutable_bcd() {
  set_has_bcd();
  if (bcd_ == NULL) bcd_ = new ::PS::BCDCall;
  return bcd_;
}
inline ::PS::BCDCall* Task::release_bcd() {
  clear_has_bcd();
  ::PS::BCDCall* temp = bcd_;
  bcd_ = NULL;
  return temp;
}
inline void Task::set_allocated_bcd(::PS::BCDCall* bcd) {
  delete bcd_;
  bcd_ = bcd;
  if (bcd) {
    set_has_bcd();
  } else {
    clear_has_bcd();
  }
}

// -------------------------------------------------------------------

// Control

// required .PS.Control.Command cmd = 1;
inline bool Control::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Control::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Control::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Control::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::Control_Command Control::cmd() const {
  return static_cast< ::PS::Control_Command >(cmd_);
}
inline void Control::set_cmd(::PS::Control_Command value) {
  assert(::PS::Control_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// repeated .PS.Node node = 2;
inline int Control::node_size() const {
  return node_.size();
}
inline void Control::clear_node() {
  node_.Clear();
}
inline const ::PS::Node& Control::node(int index) const {
  return node_.Get(index);
}
inline ::PS::Node* Control::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::PS::Node* Control::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::Node >&
Control::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::Node >*
Control::mutable_node() {
  return &node_;
}

// optional string app_conf = 3;
inline bool Control::has_app_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Control::set_has_app_conf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Control::clear_has_app_conf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Control::clear_app_conf() {
  if (app_conf_ != &::google::protobuf::internal::kEmptyString) {
    app_conf_->clear();
  }
  clear_has_app_conf();
}
inline const ::std::string& Control::app_conf() const {
  return *app_conf_;
}
inline void Control::set_app_conf(const ::std::string& value) {
  set_has_app_conf();
  if (app_conf_ == &::google::protobuf::internal::kEmptyString) {
    app_conf_ = new ::std::string;
  }
  app_conf_->assign(value);
}
inline void Control::set_app_conf(const char* value) {
  set_has_app_conf();
  if (app_conf_ == &::google::protobuf::internal::kEmptyString) {
    app_conf_ = new ::std::string;
  }
  app_conf_->assign(value);
}
inline void Control::set_app_conf(const char* value, size_t size) {
  set_has_app_conf();
  if (app_conf_ == &::google::protobuf::internal::kEmptyString) {
    app_conf_ = new ::std::string;
  }
  app_conf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Control::mutable_app_conf() {
  set_has_app_conf();
  if (app_conf_ == &::google::protobuf::internal::kEmptyString) {
    app_conf_ = new ::std::string;
  }
  return app_conf_;
}
inline ::std::string* Control::release_app_conf() {
  clear_has_app_conf();
  if (app_conf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_conf_;
    app_conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Control::set_allocated_app_conf(::std::string* app_conf) {
  if (app_conf_ != &::google::protobuf::internal::kEmptyString) {
    delete app_conf_;
  }
  if (app_conf) {
    set_has_app_conf();
    app_conf_ = app_conf;
  } else {
    clear_has_app_conf();
    app_conf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Task_Type>() {
  return ::PS::Task_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Control_Command>() {
  return ::PS::Control_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::DataType>() {
  return ::PS::DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_2fproto_2ftask_2eproto__INCLUDED
